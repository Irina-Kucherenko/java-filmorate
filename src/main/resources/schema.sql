
DROP TABLE IF EXISTS USERS, FILMS, MPA, GENRES, FILM_GENRES, FRIENDS_STATUS, USER_FILM_LIKE, USERS_IN_TOUCH  CASCADE;

CREATE TABLE IF NOT EXISTS MPA (
    mpa_id INTEGER PRIMARY KEY,
    mpa_name VARCHAR(10) NOT NULL
);

CREATE TABLE IF NOT EXISTS GENRES (
  genre_id INTEGER PRIMARY KEY,
  genre_name VARCHAR(40) NOT NULL
);

CREATE TABLE IF NOT EXISTS FILMS (
  film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR(40) NOT NULL,
  description VARCHAR(200),
  release_date DATE,
  duration INTEGER,
  mpa_id INTEGER,
  CONSTRAINT FK_MPA FOREIGN KEY (mpa_id) REFERENCES MPA (mpa_id)
);

CREATE TABLE IF NOT EXISTS FILM_GENRES (
  film_id INTEGER,
  genre_id INTEGER,
  PRIMARY KEY (film_id, genre_id),
  CONSTRAINT FK_FILMS FOREIGN KEY (film_id) REFERENCES FILMS (film_id),
  CONSTRAINT FK_GENRES FOREIGN KEY (genre_id) REFERENCES GENRES (genre_id)
);

CREATE TABLE IF NOT EXISTS USERS (
  user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email VARCHAR(40) NOT NULL,
  login VARCHAR(40) NOT NULL,
  user_name VARCHAR(40),
  birthday DATE
);

CREATE TABLE IF NOT EXISTS FRIENDS_STATUS (
  friends_status_id INTEGER PRIMARY KEY,
  status_name VARCHAR(40) NOT NULL
);

CREATE TABLE IF NOT EXISTS USERS_IN_TOUCH (
  requester_id INTEGER,
  receiver_id INTEGER,
  friends_status_id INTEGER,
  PRIMARY KEY (requester_id, receiver_id),
  CONSTRAINT FK_R_USERS FOREIGN KEY (requester_id) REFERENCES USERS (user_id),
  CONSTRAINT FK_REC_USERS FOREIGN KEY (receiver_id) REFERENCES USERS (user_id),
  CONSTRAINT FK_FRIENDS_STATUS FOREIGN KEY (friends_status_id) REFERENCES FRIENDS_STATUS (friends_status_id)
);

CREATE TABLE IF NOT EXISTS USER_FILM_LIKE (
  user_id INTEGER,
  film_id INTEGER,
  PRIMARY KEY (user_id, film_id),
  CONSTRAINT FK_USERS FOREIGN KEY (user_id) REFERENCES USERS (user_id),
  CONSTRAINT FK_UFL_FILMS FOREIGN KEY (film_id) REFERENCES FILMS (film_id)
);